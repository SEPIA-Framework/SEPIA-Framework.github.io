//Frames
function sepiaFW_build_frames(){
	var Frames = {};
	
	//some states
	var isActive = "";
	Frames.getActiveFrameName = function(){
		return isActive;
	}
	Frames.isOpen = false;

	//callbacks
	var onFinishSetup = undefined;
	var onOpen = undefined;
	var onClose = undefined;

	//handlers
	var onMessageHandler = undefined; 			//should receive a message object
	var onMissedMessageHandler = undefined;		//should be triggered when a message was not visible for user (e.g. because frame was open)
	var onSpeechToTextInputHandler = undefined;	//should show text (and optionally interrim results) that are generated by STT engine
	var onChatOutputHandler = undefined;		//should show chat output (e.g. TTS text)

	//scope
	Frames.currentScope = {};

	//local pages map
	var localPages = {};

	Frames.getLocalOrDefaultPage = function(pageUrl, languageCode){
		var localCollection = localPages[pageUrl];
		var resPageUrl;
		if (localCollection){
			resPageUrl = localCollection[languageCode] || pageUrl;
		}else{
			resPageUrl = pageUrl;
		}
		if (resPageUrl && SepiaFW.client.isDemoMode()){
			resPageUrl = resPageUrl.replace("<assist_server>", "xtensions/custom-data");
		}
		resPageUrl = SepiaFW.config.replacePathTagWithActualPath(resPageUrl);
		return resPageUrl;
	}
	Frames.setLocalPage = function(pageUrl, languageCode, localPage){
		var localCollection = localPages[pageUrl];
		if (!localCollection) localCollection = {};
		localCollection[languageCode] = localPage;
		localPages[pageUrl] = localCollection;
	}
	
	Frames.open = function(info){
		var isThisFrameActive = (isActive == info.pageUrl);
		
		//callbacks?
		if (info.autoFillFrameEvents == undefined) info.autoFillFrameEvents = true;		//make this default true
		if (isThisFrameActive){
			onOpen = getFunctionOrScopeEntry(info.onOpen, "onOpen", info.autoFillFrameEvents);
			onClose = getFunctionOrScopeEntry(info.onClose, "onClose", info.autoFillFrameEvents);
			onFinishSetup = getFunctionOrScopeEntry(info.onFinishSetup, "onFinishSetup", info.autoFillFrameEvents);
			onMessageHandler = getFunctionOrScopeEntry(info.onMessageHandler, "onMessageHandler", info.autoFillFrameEvents);
			onMissedMessageHandler = getFunctionOrScopeEntry(info.onMissedMessageHandler, "onMissedMessageHandler", info.autoFillFrameEvents);
			onSpeechToTextInputHandler = getFunctionOrScopeEntry(info.onSpeechToTextInputHandler, "onSpeechToTextInputHandler", info.autoFillFrameEvents);
			onChatOutputHandler = getFunctionOrScopeEntry(info.onChatOutputHandler, "onChatOutputHandler", info.autoFillFrameEvents);		
			//NOTE: difference between 'onChatOutputHandler' and 'messageHandler' is that it will not block the normal queue, it just delivers the text
		}else{
			Frames.currentScope = {};
		}
		
		//theme (part 1 - frame):
		//-get theme from scope?
		if (info.loadFrameTheme == undefined) info.loadFrameTheme = true;				//make this default true
		if (!info.theme && info.loadFrameTheme){
			if (Frames.currentScope.theme) info.theme = Frames.currentScope.theme;
			else info.theme = SepiaFW.ui.getSkinStyle();
		}
		//-clean up old theme first
		$('#sepiaFW-frames-view').removeClass('dark');
		$('.sepiaFW-frames-page').removeClass('dark');
		$('.sepiaFW-frames-page').removeClass('flat');
		$('html').removeClass('dark-frame');
		//-then add new
		if (info.theme){
			//basic frame theme: light, dark,
			//add: flat (removes frame page inner padding)
			//screen: dark_full (will mod. frame as well if not set to light)
			if (info.theme.indexOf("dark") >= 0){
				$('#sepiaFW-frames-view').addClass('dark');
				$('.sepiaFW-frames-page').addClass('dark');
			}
			/*
			if (info.theme.indexOf("dark_full") >= 0){
				$('html').addClass('dark-frame');
			}
			*/
			if (info.theme.indexOf("flat") >= 0){
				$('.sepiaFW-frames-page').addClass('flat');
			}
		}
		$('#sepiaFW-main-window')
			.addClass('sepiaFW-frame-mode')
			.removeClass('sepiaFW-skin-mod');

		if (!isThisFrameActive){
			//SETUP: load frame and make active
			Frames.setup(info, function(){
				Frames.open(info);
			});
			isActive = info.pageUrl;
			return;
		
		}else{
			//OPEN frame
			$('#sepiaFW-frames-view').slideDown(300, function(){
				Frames.uic.refresh();
			});
			Frames.isOpen = true;
			SepiaFW.ui.switchSwipeBars('frames');
		}
		//theme (part 2 - window)
		if (info.theme){
			if (info.theme.indexOf("dark_full") >= 0){
				$('html').addClass('dark-frame');
			}
		}

		//on open
		if(onOpen) onOpen();
		//TODO: add data
		
		//trigger page-change to refresh content
		if (Frames.currentScope && (Frames.currentScope.onFramePageChange || Frames.currentScope.onPaneChange)){
			var currentPane = SepiaFW.frames.uic.getCurrentPane();
			var triggeredByOpenEvent = true;	//NOTE: this can be used to distinguish real "change" events from "open" events
			//NOTE: we count pages: 1, 2, 3, ... (panes are 0, 1, ...)
			if (Frames.currentScope.onFramePageChange) Frames.currentScope.onFramePageChange(currentPane + 1, triggeredByOpenEvent);
			else if (Frames.currentScope.onPaneChange) Frames.currentScope.onPaneChange(currentPane, paneHistory, triggeredByOpenEvent);
		}
	}
	Frames.close = function(){
		//design resets (global changes)
		$('html').removeClass('dark-frame');
		$('#sepiaFW-main-window')
			.removeClass('sepiaFW-frame-mode')
			.addClass('sepiaFW-skin-mod');
		//close
		$('#sepiaFW-frames-view').slideUp(300);
		Frames.isOpen = false;
		SepiaFW.ui.switchSwipeBars();
		//on close
		if(onClose) onClose();
		//callbacks reset
		onFinishSetup = undefined;
		onOpen = undefined;
		onClose = undefined;
		//handlers reset
		onMessageHandler = undefined;
		onChatOutputHandler = undefined;
		onMissedMessageHandler = undefined;
		onSpeechToTextInputHandler = undefined;
	}
		
	Frames.setup = function(info, finishCallback){
		//get HTML - is there a language dependent version?
		var framePage = Frames.getLocalOrDefaultPage(info.pageUrl, SepiaFW.config.appLanguage).trim();
		var isValidLocalURL = SepiaFW.tools.isRelativeFileUrl(framePage, "html");
		var isAcceptableFileOrigin = (framePage.indexOf("file://") == 0);	//any other condition? - This is important for Android (Cordova)
		var isTrustedRemoteUrl = SepiaFW.tools.isRemoteFileUrl(framePage, "html") 
			&& (SepiaFW.tools.isSameOrigin(framePage) || SepiaFW.config.urlIsSepiaFileHost(framePage));
		var isTrusted = isValidLocalURL || isAcceptableFileOrigin || isTrustedRemoteUrl;

		//$.get(framePage, function(frameHtml){
        SepiaFW.files.fetch(framePage, function(frameHtml){
			if (!isTrusted){
				SepiaFW.debug.error("WARNING: Frame page has remote location and was BLOCKED due to security restrictions! - URL: " + framePage);
				SepiaFW.ui.showSafeWarningPopup("Warning", [
					"SEPIA was asked to open a remote URL in a custom view (frame). The request has been blocked due to security restrictions.",
					"If you want to use this view please ask an admin to move it to a secure location (e.g. the SEPIA file server).",
					"URL:"
				], framePage);
				Frames.close();
				return;
			}else{
				$('#sepiaFW-frames-view').html(frameHtml);
			}
			
			//nav-bar
			$('#sepiaFW-frames-close').off().on('click', function(){
				Frames.close();
			});
			$('#sepiaFW-frames-mic').off().each(function(){
				SepiaFW.ui.buildDefaultMicLogic(this);
				//we could add some animation-listeners as well (read state and add on-open and remove them on-close maybe?)
			});
			$('#sepiaFW-frames-show-next-page').off().on('click', function(){
				Frames.uic.next();
			});
			$('#sepiaFW-frames-show-prev-page').off().on('click', function(){
				Frames.uic.prev();
			});
			
			//frame carousel
			Frames.uic = new SepiaFW.ui.Carousel('#sepiaFW-frame-carousel', '', '#sepiaFW-swipeBar-frames-left', '#sepiaFW-swipeBar-frames-right', '',
				function(currentPane, paneHistory){
					$("#sepiaFW-frames-nav-bar-page-indicator").find('div').removeClass("active");
					$("#sepiaFW-frames-nav-bar-page-indicator > div:nth-child(" + (currentPane+1) + ")").addClass('active').fadeTo(350, 1.0).fadeTo(350, 0.0);
					if (Frames.currentScope && (Frames.currentScope.onFramePageChange || Frames.currentScope.onPaneChange)){
						if (paneHistory.length < 2 || paneHistory[paneHistory.length - 2] != currentPane){
							var triggeredByOpenEvent = false;
							//NOTE: we count pages: 1, 2, 3, ... (panes are 0, 1, ...)
							if (Frames.currentScope.onFramePageChange) Frames.currentScope.onFramePageChange(currentPane + 1, triggeredByOpenEvent);
							else if (Frames.currentScope.onPaneChange) Frames.currentScope.onPaneChange(currentPane, paneHistory, triggeredByOpenEvent);
						}
					}
				});
			Frames.showFramePage = function(pageNbr){ Frames.uic.showPane(pageNbr - 1); };		//NOTE: don't mix up with localPage (HTML path)
			Frames.uic.init();
			Frames.uic.showPane(0);
			
			if (Frames.uic.getNumberOfPanes() <= 1){
				$('#sepiaFW-frames-show-next-page').hide();
				$('#sepiaFW-frames-show-prev-page').hide();
			}

			//on finish setup
			onFinishSetup = getFunctionOrScopeEntry(info.onFinishSetup, "onFinishSetup", info.autoFillFrameEvents);
			if(onFinishSetup) onFinishSetup();
			//TODO: add data

			if (finishCallback) finishCallback();
        
		//Error
		}, function(){
			$('#sepiaFW-frames-view').html("Error - could not load page");
			SepiaFW.ui.showInfo("Custom view failed to load. URL: " + framePage, true);
		});
	}

	Frames.canHandleMessages = function(){
		return !!onMessageHandler;
	}
	Frames.handleMessages = function(msgObject){
		if (onMessageHandler) onMessageHandler(msgObject);
	}

	Frames.canHandleMissedMessages = function(){
		return !!onMissedMessageHandler;
	}
	Frames.handleMissedMessages = function(msgObject){
		if (onMissedMessageHandler) onMissedMessageHandler(msgObject);
	}

	Frames.canHandleSpeechToTextInput = function(){
		return !!onSpeechToTextInputHandler;
	}
	Frames.handleSpeechToTextInput = function(msgObject){
		if (onSpeechToTextInputHandler){
			return onSpeechToTextInputHandler(msgObject);
		}
	}

	Frames.canShowChatOutput = function(){
		return !!onChatOutputHandler;
	}
	Frames.handleChatOutput = function(msgObject){
		if (onChatOutputHandler){
			onChatOutputHandler(msgObject);
		}
	}

	function getFunctionOrScopeEntry(funOrName, handlerName, fillViaScope){
		if (funOrName == undefined && fillViaScope) funOrName = handlerName;
		return (funOrName && typeof funOrName == "string")? Frames.currentScope[funOrName] : funOrName;
	}

	/* --- build helpers --- */

	Frames.build = {};

	//Input components for frames:

	Frames.build.inputGroup = function(name, value, type, disabled, inputId, onInputChange){
		var c = document.createElement("div");
		c.className = "group";
		if (disabled){
			c.classList.add("disabled");
		}
		var cName = document.createElement("label");
		cName.textContent = name;
		c.appendChild(cName);
		var cVal;

		if (type == "checkbox"){
			cVal = SepiaFW.ui.build.toggleButton(inputId, function(){ 
				onInputChange(true); 
			},function(){ 
				onInputChange(false); 
			}, value, disabled);
			
			c.appendChild(cVal);
			return {element: c, label: cName, input: undefined, setValue: cVal.setValue, getValue: cVal.getValue};

		}else if (type == "select" || Array.isArray(value)){
			cVal = SepiaFW.ui.build.optionSelector(inputId, value, "", function(ele){
				onInputChange(ele.value, ele.selectedOptions[0].textContent);
			});
			cVal.disabled = disabled;
		
		}else if (type == "range" && typeof value == "object"){
			var groupDiv = document.createElement("div");
			groupDiv.className = "action-group";

			var cValSpan = document.createElement("span");

			cVal = document.createElement("input");
			if (inputId) cVal.id = inputId;
			cVal.type = "range";
			var minMax = value.range;
			if (minMax && minMax.length == 2){
				cVal.min = minMax[0];
				cVal.max = minMax[1];
			}else{
				if (value.min != undefined) cVal.min = value.min;
				if (value.max != undefined) cVal.max = value.max;
			}
			cVal.step = value.step || 0.1;
			cVal.value = (value.default != undefined)? value.default : value.value;
			//cVal.setAttribute("data-after", cVal.value);
			cValSpan.textContent = cVal.value;
			cVal.disabled = disabled;
			cVal.onchange = function(){ 
				onInputChange(cVal.value);
				//cVal.setAttribute("data-after", cVal.value);
				cValSpan.textContent = cVal.value;
			};
			cVal.oninput = function(){
				//cVal.setAttribute("data-after", cVal.value);
				cValSpan.textContent = cVal.value;
			};

			groupDiv.appendChild(cValSpan);
			groupDiv.appendChild(cVal);
			c.appendChild(groupDiv);
			return {element: c, label: cName, input: cVal, setValue: function(val){ 
				cVal.value = val;
				cValSpan.textContent = cVal.value;
			}, getValue: function(val){ return val; }};
			
		}else{
			cVal = document.createElement("input");
			if (inputId) cVal.id = inputId;
			cVal.type = type;
			cVal.value = value;
			cVal.disabled = disabled;
			cVal.onchange = function(){ onInputChange(cVal.value) };
		}
		c.appendChild(cVal);
		return {
			element: c, 
			label: cName, 
			input: cVal, 
			setValue: function(val){ cVal.value = val; },
			getValue: function(){ return cVal.value; }
		};
	};
	
	return Frames;
}