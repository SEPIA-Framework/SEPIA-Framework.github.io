//Frames
function sepiaFW_build_frames(){
	var Frames = {};
	
	//some states
	var isActive = "";
	Frames.getActiveFrameName = function(){
		return isActive;
	}
	Frames.isOpen = false;

	//callbacks
	var onFinishSetup = undefined;
	var onOpen = undefined;
	var onClose = undefined;

	//handlers
	var onMessageHandler = undefined; 			//should receive a message object
	var onMissedMessageHandler = undefined;		//should be triggered when a message was not visible for user (e.g. because frame was open)
	var onSpeechToTextInputHandler = undefined;	//should show text (and optionally interrim results) that are generated by STT engine
	var onChatOutputHandler = undefined;		//should show chat output (e.g. TTS text)

	//scope
	Frames.currentScope = {};

	//local pages map
	var localPages = {};

	Frames.getLocalOrDefaultPage = function(pageUrl, languageCode){
		var localCollection = localPages[pageUrl];
		var resPageUrl;
		if (localCollection){
			resPageUrl = localCollection[languageCode] || pageUrl;
		}else{
			resPageUrl = pageUrl;
		}
		resPageUrl = SepiaFW.config.replacePathTagWithActualPath(resPageUrl);
		return resPageUrl;
	}
	Frames.setLocalPage = function(pageUrl, languageCode, localPage){
		var localCollection = localPages[pageUrl];
		if (!localCollection) localCollection = {};
		localCollection[languageCode] = localPage;
		localPages[pageUrl] = localCollection;
	}
	
	Frames.open = function(info){
		var isThisFrameActive = (isActive == info.pageUrl);

		//callbacks?
		onFinishSetup = info.onFinishSetup;
		if (isThisFrameActive){
			onOpen = getFunctionOrScopeEntry(info.onOpen);
			onClose = getFunctionOrScopeEntry(info.onClose);
			onFinishSetup = getFunctionOrScopeEntry(info.onFinishSetup);
			onMessageHandler = getFunctionOrScopeEntry(info.onMessageHandler);
			onMissedMessageHandler = getFunctionOrScopeEntry(info.onMissedMessageHandler);
			onSpeechToTextInputHandler = getFunctionOrScopeEntry(info.onSpeechToTextInputHandler);
			onChatOutputHandler = getFunctionOrScopeEntry(info.onChatOutputHandler);		//NOTE: difference to 'messageHandler' is that this will not block the normal queue, it just delivers the text
		}else{
			Frames.currentScope = {};
		}
		
		//theme:
		//-clean up old theme first
		$('#sepiaFW-frames-view').removeClass('dark');
		$('.sepiaFW-frames-page').removeClass('dark');
		$('.sepiaFW-frames-page').removeClass('flat');
		$('html').removeClass('dark-frame');
		//-then add new
		if (info.theme){
			if (info.theme.indexOf("dark") >= 0){
				$('#sepiaFW-frames-view').addClass('dark');
				$('.sepiaFW-frames-page').addClass('dark');
			}
			if (info.theme.indexOf("dark_full") >= 0){
				$('html').addClass('dark-frame');
			}
			if (info.theme.indexOf("flat") >= 0){
				$('.sepiaFW-frames-page').addClass('flat');
			}
		}

		if (!isThisFrameActive){
			//load frame and make active
			Frames.setup(info, function(){
				Frames.open(info);
			});
			isActive = info.pageUrl;
			return;
		
		}else{
			//open frame
			$('#sepiaFW-frames-view').slideDown(300, function(){
				Frames.uic.refresh();
			});
			Frames.isOpen = true;
			SepiaFW.ui.switchSwipeBars('frames');
		}
		//on open
		if(onOpen) onOpen();
	}
	Frames.close = function(){
		//design resets (global changes)
		$('html').removeClass('dark-frame');
		//close
		$('#sepiaFW-frames-view').slideUp(300);
		Frames.isOpen = false;
		SepiaFW.ui.switchSwipeBars();
		//on close
		if(onClose) onClose();
		//callbacks reset
		onFinishSetup = undefined;
		onOpen = undefined;
		onClose = undefined;
		//handlers reset
		onMessageHandler = undefined;
		onChatOutputHandler = undefined;
		onMissedMessageHandler = undefined;
		onSpeechToTextInputHandler = undefined;
	}
		
	Frames.setup = function(info, finishCallback){
		//get HTML - is there a language dependent version?
		var framePage = Frames.getLocalOrDefaultPage(info.pageUrl, SepiaFW.config.appLanguage);
		var isRemote = (framePage.indexOf("http:") == 0) || (framePage.indexOf("https:") == 0) || (framePage.indexOf("ftp:") == 0);
		if (isRemote){
			var isSameOrigin = SepiaFW.tools.isSameOrigin(framePage);
			var isSepiaFileHost = SepiaFW.config.urlIsSepiaFileHost(framePage);
			if (isSameOrigin || isSepiaFileHost) isRemote = false;
		}

		//$.get(framePage, function(frameHtml){
        SepiaFW.files.fetch(framePage, function(frameHtml){
			if (isRemote){
				SepiaFW.debug.error("WARNING: Frame page has remote location and can contain harmful code. It has been BLOCKED! - URL: " + framePage);
				SepiaFW.ui.showPopup("<h3 style='color:#f00; width:100%; text-align: center;'>Warning</h3>" 
					+ "<p>SEPIA was asked to open a remote URL in a custom view (frame). The request has been blocked due to security concerns.</p>" 
					+ "<p>URL: " + framePage + "</p>"
					+ "<p>If you want to use this view please ask an admin to move it to a secure location (e.g. the SEPIA file server).</p>"
				);
				Frames.close();
				return;
			}else{
				$('#sepiaFW-frames-view').html(frameHtml);
			}
			
			//nav-bar
			$('#sepiaFW-frames-close').off().on('click', function(){
				Frames.close();
			});
			$('#sepiaFW-frames-mic').off().each(function(){
				SepiaFW.ui.buildDefaultMicLogic(this);
				//we could add some animation-listeners as well (read state and add on-open and remove them on-close maybe?)
			});
			$('#sepiaFW-frames-show-next-page').off().on('click', function(){
				Frames.uic.next();
			});
			$('#sepiaFW-frames-show-prev-page').off().on('click', function(){
				Frames.uic.prev();
			});
			
			//frame carousel
			Frames.uic = new SepiaFW.ui.Carousel('#sepiaFW-frame-carousel', '', '#sepiaFW-swipeBar-frames-left', '#sepiaFW-swipeBar-frames-right', '',
				function(currentPane){
					$("#sepiaFW-frames-nav-bar-page-indicator").find('div').removeClass("active");
					$("#sepiaFW-frames-nav-bar-page-indicator > div:nth-child(" + (currentPane+1) + ")").addClass('active').fadeTo(350, 1.0).fadeTo(350, 0.0);
					if (currentPane == 1){
						//page 1 active
					}else if (currentPane == 0){
						//page 2 active
					}
				});
			Frames.uic.init();
			Frames.uic.showPane(0);
			
			if (Frames.uic.getNumberOfPanes() <= 1){
				$('#sepiaFW-frames-show-next-page').hide();
				$('#sepiaFW-frames-show-prev-page').hide();
			}

			//on finish setup
			if(onFinishSetup) onFinishSetup();

			if (finishCallback) finishCallback();
        
		//Error
		}, function(){
			$('#sepiaFW-frames-view').html("Error - could not load page");
		});
	}

	Frames.canHandleMessages = function(){
		return !!onMessageHandler;
	}
	Frames.handleMessages = function(msgObject){
		if (onMessageHandler) onMessageHandler(msgObject);
	}

	Frames.canHandleMissedMessages = function(){
		return !!onMissedMessageHandler;
	}
	Frames.handleMissedMessages = function(msgObject){
		if (onMissedMessageHandler) onMissedMessageHandler(msgObject);
	}

	Frames.canHandleSpeechToTextInput = function(){
		return !!onSpeechToTextInputHandler;
	}
	Frames.handleSpeechToTextInput = function(msgObject){
		if (onSpeechToTextInputHandler){
			return onSpeechToTextInputHandler(msgObject);
		}
	}

	Frames.canShowChatOutput = function(){
		return !!onChatOutputHandler;
	}
	Frames.handleChatOutput = function(msgObject){
		if (onChatOutputHandler){
			onChatOutputHandler(msgObject);
		}
	}

	function getFunctionOrScopeEntry(funOrName){
		return (funOrName && typeof funOrName == "string")? Frames.currentScope[funOrName] : funOrName;
	}
	
	return Frames;
}